{"version":3,"sources":["Pages/LoginPage/assets/welcome.png","Pages/LoginPage/assets/tree.png","Pages/Dashboard/assets/background.jpg","Pages/Dashboard/assets/ashay.jpeg","Pages/Dashboard/assets/harshal.jpg","Pages/Dashboard/assets/vivek.jpg","Pages/Dashboard/assets/yash.jpg","App.js","Pages/LoginPage/styles.js","Pages/LoginPage/LoginPage.jsx","Pages/Dashboard/styles.js","Pages/Dashboard/Dashboard.jsx","serviceWorker.js","index.js"],"names":["module","exports","cYear","cDate","cMonth","currentDate","styles","makeStyles","theme","loginPage","background","loginCard","border","borderRadius","padding","width","height","marginTop","welcomeSection","greet","color","fontSize","letterSpacing","title","fontFamily","tree","display","loginSection","alignItems","justifyContent","flexDirection","input","borderBottom","margin","outline","loginTitle","textAlign","marginBottom","loginButton","checkBox","checkLabel","LoginPage","classes","useState","username","setUsername","password","setPassword","isRemember","setIsRemember","isLoading","setIsLoading","user","JSON","parse","sessionStorage","getItem","history","useHistory","userData","to","Box","className","Grid","container","item","md","lg","xl","xs","sm","Paper","elevation","Typography","src","welcome","onSubmit","event","count","index","preventDefault","i","length","loginUserData","name","setItem","stringify","setTimeout","push","alert","type","value","onChange","e","target","placeholder","required","id","checkbox","htmlFor","Button","variant","disabled","root","drawer","backgroundColor","breakpoints","up","flexShrink","menuButton","zIndex","drawerPaper","content","flexGrow","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","closeMenuButton","marginRight","marginLeft","greetToUser","avatar","spacing","profileTab","profileText","profileIcon","timeAndDate","time","clockIcon","timeString","date","taskTitle","taskText","calendar","todoForm","iconBtn","taskCard","cursor","boxShadow","deleteBtn","float","logoutBtn","settings","tasks","taskCardTitle","taskCardDate","Task","task","completeTask","deleteTask","todaysDate","useContext","DateContext","Date","onClick","style","textDecoration","completed","IconButton","aria-label","stopPropagation","Dashboard","useTheme","isOpen","setIsOpen","newTodo","setNewTodo","taskContent","setTaskContent","setDate","useEffect","timerID","setInterval","clearInterval","url","handleDrawerToggle","ashay","harshal","vivek","yash","DrawerContent","window","confirm","clear","Avatar","alt","toLocaleTimeString","newTasks","console","log","splice","CssBaseline","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","toolbar","edge","toLocaleString","hour","minute","hour12","addTask","FormControl","fullWidth","InputLabel","Input","endAdornment","InputAdornment","position","map","key","React","createContext","recentDate","getFullYear","getMonth","getDate","App","Provider","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a4b6d1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/welcome.046e422a.png\";","module.exports = __webpack_public_path__ + \"static/media/tree.52b6acd2.png\";","module.exports = __webpack_public_path__ + \"static/media/background.1aa7a057.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ashay.ae7943ee.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/harshal.d6b25900.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vivek.bd8150b8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yash.df1d2aa3.jpg\";","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport LoginPage from './Pages/LoginPage/LoginPage';\nimport Dashboard from './Pages/Dashboard/Dashboard';\n\n// Creating date and time context for getting current date and time which will be used in other parts of the app\nexport const DateContext = React.createContext();\n// export const TimeContext = React.createContext();\n\n/** \n * code to get current Date in dd/mm/yyyy format\n*/ \nlet cYear, cDate, cMonth;\nconst recentDate = new Date();\nlet currentDate = '';\ncYear = recentDate.getFullYear();\ncMonth = (recentDate.getMonth() + 1);\ncDate = recentDate.getDate();\nif (cMonth < 10) {\n  cMonth = '0' + cMonth;\n}\nif (cDate < 10) {\n  cDate = '0' + cDate;\n}\ncurrentDate = cDate + '/' + cMonth + '/' + cYear;\n\nfunction App() {\n \n  \n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <DateContext.Provider value={currentDate}>\n              <Route path='/' exact component={() => <LoginPage />} />\n              <Route path='/dashboard' component={() => <Dashboard />} />\n          </DateContext.Provider>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = makeStyles((theme) => ({\r\n    loginPage: {\r\n        background: '#000428',\r\n        background: '-webkit-linear-gradient(to top right, #000428,#004e92 )',\r\n        background: 'linear-gradient(to top right, #000428,#004e92 )',\r\n        height: '100%',\r\n        backgroundPosition: 'center',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: 'cover',\r\n        padding: '1px',\r\n        width: '100%'\r\n    },\r\n    loginCard: {\r\n        border: 'none',\r\n        borderRadius: '0',\r\n        padding: '0',\r\n        width: '100%',\r\n        height: '500px',\r\n        marginTop: '70px'\r\n    },\r\n    welcomeSection: {\r\n        background: '#000428',\r\n        background: '-webkit-linear-gradient(to top right, #000428,#004e92 )',\r\n        background: 'linear-gradient(to top right, #000428,#004e92 )',\r\n        height: '500px',\r\n        backgroundPosition: 'center',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: 'cover',\r\n        padding: \"100px 100px 0 100px\",\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n    },\r\n    greet: {\r\n        color: \"#ffffff\",\r\n        fontSize: '25px',\r\n        letterSpacing: '4px',\r\n    },\r\n    title: {\r\n        color: '#ffffff',\r\n        fontSize: '35px',\r\n        fontFamily: 'Ubuntu',\r\n        letterSpacing: '4px',\r\n    },\r\n    tree: {\r\n        display: 'none'\r\n    },\r\n    loginSection: {\r\n        padding: '80px 50px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n    },\r\n    input: {\r\n        color: '#000000',\r\n        border: 'none',\r\n        borderBottom: '1px solid #004e92',\r\n        borderRadius: '0',\r\n        fontSize: '18px',\r\n        padding: '5px',\r\n        margin: '0  0 20px 0',\r\n        width: '100%',\r\n        outline: 'none',\r\n        fontFamily: 'Ubuntu',\r\n    },\r\n    loginTitle: {\r\n        color: '#004e92',\r\n        fontSize: '35px',\r\n        textAlign: 'center',\r\n        marginBottom: '20px',\r\n        fontFamily: 'Ubuntu'\r\n    },\r\n    loginButton: {\r\n        fontSize: '20px',\r\n        padding: '5px 25px',\r\n        width: '100%',\r\n        border: 'none',\r\n        borderRadius: '25px',\r\n        outline: 'none',\r\n        fontFamily: 'Ubuntu',\r\n        marginTop: '20px'\r\n    },\r\n    checkBox: {\r\n        fontSize: '15px'\r\n    },\r\n    checkLabel: {\r\n        fontSize: '15px',\r\n        fontFamily: 'Ubuntu',\r\n    },\r\n}))\r\n\r\nexport default styles","import React, { useState } from 'react';\r\nimport {\r\n    Box,\r\n    Grid,\r\n    Paper,\r\n    Typography,\r\n    TextField,\r\n    FormControl,\r\n    Button,\r\n    FormControlLabel, \r\n    Checkbox, \r\n    CircularProgress\r\n} from '@material-ui/core';\r\nimport styles from './styles';\r\nimport welcome from './assets/welcome.png';\r\nimport tree from './assets/tree.png'\r\nimport { useHistory, Redirect } from 'react-router-dom';\r\n\r\nconst LoginPage = () => {\r\n    const classes = styles();\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isRemember, setIsRemember] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const user = JSON.parse(sessionStorage.getItem('UserData'));\r\n    const history = useHistory();\r\n\r\n    // userData stored in array of objects\r\n    const userData = [\r\n        {\r\n            username: 'Ashay',\r\n            password: 'ashay'\r\n        },\r\n        {\r\n            username: 'Vivek',\r\n            password: 'vivek'\r\n        },\r\n        {\r\n            username: 'Harshal',\r\n            password: 'harshal'\r\n        },\r\n        {\r\n            username: 'Yash',\r\n            password: 'yash'\r\n        },\r\n    ]\r\n\r\n    // submitHandler for login form\r\n    const submitHandler = event => {\r\n        let count = 0;\r\n        let index = 0;\r\n        event.preventDefault();\r\n        for(let i = 0; i < userData.length; i++ ){\r\n            if(username === userData[i].username && password === userData[i].password){\r\n              count++ ;\r\n              index = i;\r\n              setIsLoading(true);\r\n              break;\r\n            }\r\n            else{\r\n               count = 0;\r\n            }\r\n        }\r\n        \r\n        if(count > 0){\r\n            let loginUserData = {name: userData[index].username, password: userData[index].password};\r\n            sessionStorage.setItem('UserData', JSON.stringify(loginUserData));\r\n            setTimeout(() => {\r\n                history.push('/dashboard');\r\n                setIsLoading(false);\r\n            }, 5000);\r\n            \r\n            \r\n        }\r\n        else{\r\n            alert('Invalid user');\r\n        }\r\n    }\r\n\r\n    // if user already login; directly route to dashboard\r\n    if(user) return <Redirect to='/dashboard ' />\r\n\r\n    return (\r\n        <Box className={classes.loginPage}>\r\n            <Grid container>\r\n                <Grid item md={1} lg={1} xl={1}></Grid>\r\n                <Grid item xs={12} sm={12} md={10} lg={10} xl={10}>\r\n                    <Paper className={classes.loginCard} elevation={10}>\r\n                        <Grid container>\r\n                            <Grid item md={7} lg={8} xl={8} className={classes.welcomeSection}>\r\n                                <Typography className={classes.greet}>Welcome to DevBand</Typography>\r\n                                <Typography className={classes.title}>Task Scheduler</Typography>\r\n                                <img src={welcome} width='85%' />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={5} lg={4} xl={4} className={classes.loginSection}>\r\n                                <img src={tree} width='50%' className={classes.tree} />\r\n                                {/* Login form starts */}\r\n                                <form onSubmit={submitHandler}>\r\n                                    <Typography className={classes.loginTitle}>Login</Typography>\r\n\r\n                                    <input\r\n                                        className={classes.input}\r\n                                        type='text'\r\n                                        value={username}\r\n                                        onChange={(e) => setUsername(e.target.value)}\r\n                                        placeholder=\"Username\"\r\n                                        required />\r\n\r\n                                    <input\r\n                                        className={classes.input}\r\n                                        type='password'\r\n                                        value={password}\r\n                                        onChange={(e) => setPassword(e.target.value)}\r\n                                        placeholder=\"Password\"\r\n                                        required />\r\n\r\n                                       <input \r\n                                       type=\"checkbox\" \r\n                                       id=\"remeberMe\" \r\n                                       value={isRemember}\r\n                                       onChange={(e) => setIsRemember(!isRemember)}\r\n                                       className={classes.checkbox}\r\n                                       required/> &nbsp;\r\n                                       <label htmlFor=\"rememberMe\" className={classes.checkLabel}>Remember Me</label>\r\n\r\n                                    {\r\n                                        isLoading ? (\r\n                                            <Button variant=\"contained\" disabled className={classes.loginButton}>Please Wait</Button>\r\n                                        ) : (\r\n                                            <Button variant=\"contained\" color='primary' className={classes.loginButton} type='submit'>Login</Button>\r\n                                        )\r\n                                    }\r\n                                </form>\r\n                                {/* Login form closes */}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item md={1} lg={1} xl={1}></Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default LoginPage\r\n","import { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport background from './assets/background.jpg';\r\n\r\n\r\nconst styles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n      },\r\n      drawer: {\r\n        backgroundColor: '#fffff0',\r\n        width: '320px',\r\n        [theme.breakpoints.up('sm')]: {\r\n          width: '450px',\r\n          flexShrink: 0,\r\n        },\r\n      },\r\n      \r\n      menuButton: {\r\n        // marginRight: theme.spacing(2),\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        [theme.breakpoints.up('sm')]: {\r\n          display: 'none',\r\n        },\r\n        color: \"#004e92\"\r\n      },\r\n      drawerPaper: {\r\n        backgroundColor: '#fffff0',\r\n        width: '450px',\r\n        padding: '25px'\r\n      },\r\n      content: {\r\n        flexGrow: 1,\r\n        backgroundColor: '#ffffff',\r\n        height: '100%',\r\n        padding: '10px',\r\n        backgroundImage: `url( ${background} )`,\r\n        backgroundPosition: 'center',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: 'cover',\r\n        height: '100%'\r\n        // padding: theme.spacing(3),\r\n      },\r\n      closeMenuButton: {\r\n        marginRight: 'auto',\r\n        marginLeft: 0,\r\n      },\r\n      title: {\r\n        fontSize: '30px',\r\n        letterSpacing: '3px',\r\n        fontFamily: 'SansitaSwashed',\r\n        color: '#004e92',\r\n        marginBottom: '15px',\r\n      },\r\n      greetToUser: {\r\n        fontSize: '22px',\r\n        fontFamily: 'Ubuntu',\r\n        marginBottom: '8px'\r\n      },\r\n      avatar: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7),\r\n      },\r\n      profileTab: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-around',\r\n        marginBottom: '25px'\r\n      },\r\n      profileText: {\r\n        // fontFamily: 'Ubuntu',\r\n        fontSize: '18px'\r\n      },\r\n      profileIcon: {\r\n        fontSize: '45px',\r\n        color: '#004e92'\r\n      },\r\n      timeAndDate: {\r\n        borderRadius: '0'\r\n      },\r\n      time: {\r\n        padding: '10px',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#ffffff'\r\n      },\r\n      clockIcon: {\r\n        fontSize: '30px',\r\n        color: '#004e92',\r\n        marginBottom: '20px'\r\n      },\r\n      timeString: {\r\n        fontSize: '16px',\r\n        fontFamily: 'Ubuntu'\r\n      },\r\n      date: {\r\n        backgroundColor: '#004e92',\r\n        padding: '10px'\r\n\r\n      },\r\n      taskTitle: {\r\n        color: 'white',\r\n        fontSize: '20px',\r\n        marginBottom: '10px',\r\n        fontFamily: 'Ubuntu'\r\n      },\r\n      taskText: {\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        fontFamily: 'Ubuntu'\r\n      },\r\n      calendar: {\r\n        width: '100%',\r\n        marginTop: '25px',\r\n        fontSize: '15px',\r\n        border: '0',\r\n        fontFamily: 'Ubuntu'\r\n      },\r\n      todoForm: {\r\n        marginBottom: '20px'\r\n      },\r\n      input: {\r\n        fontSize: '20px',\r\n        fontFamily: 'Ubuntu',\r\n        color: '#ffffff'\r\n      },\r\n      iconBtn: {\r\n        fontSize: '25px',\r\n        color: '#ffffff'\r\n      },\r\n      taskCard: {\r\n        borderRadius: '10px',\r\n        margin: '20px 0 20px 0',\r\n        padding: '15px',\r\n        fontFamily: 'Ubuntu',\r\n        cursor: 'Pointer',\r\n        backgroundColor: '#fffff0',\r\n        boxShadow: '0 2px 4px 0 #000000',\r\n        display: 'flex',\r\n        // alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        flexDirection: 'row'\r\n        // fontSize: '20px',\r\n      },\r\n      deleteBtn: {\r\n        fontSize: '50px',\r\n        color: '#004e92',\r\n        float: 'right'\r\n      },\r\n      logoutBtn: {\r\n        fontSize: '30px',\r\n        color: '#004e92',\r\n        float: 'right',\r\n        \r\n      },\r\n      settings: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        \r\n      },\r\n      tasks: {\r\n        padding: '30px'\r\n      },\r\n      taskCardTitle: {\r\n        fontSize: '20px',\r\n        fontFamily: 'Ubuntu',\r\n        margin: '10px 0',\r\n      },\r\n      taskCardDate: {\r\n        fontSize: '13px',\r\n        fontFamily: 'Ubuntu',\r\n        // color: '#004e92'\r\n      },\r\n      // input: {\r\n      //   backgroundColor: '#ffffff'\r\n      // },\r\n      // todoCard: {\r\n      //   margin: '5px',\r\n      //   minHeight: '200px'\r\n      // },\r\n}))\r\n\r\nexport default styles;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n  AppBar,\r\n  Grid,\r\n  CssBaseline,\r\n  Divider,\r\n  Drawer,\r\n  Hidden,\r\n  IconButton,\r\n  FormControl,\r\n  InputAdornment,\r\n  InputLabel,\r\n  Input,\r\n  Typography,\r\n  Avatar,\r\n  Paper\r\n} from '@material-ui/core'\r\nimport styles from './styles';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { FaTimes, FaStream, FaSignOutAlt } from \"react-icons/fa\";\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport ashay from './assets/ashay.jpeg';\r\nimport harshal from './assets/harshal.jpg';\r\nimport vivek from './assets/vivek.jpg';\r\nimport yash from './assets/yash.jpg';\r\nimport { BsHouseFill, BsClockFill, BsTrash, BsBoxArrowInRight } from \"react-icons/bs\";\r\nimport { FaTelegramPlane } from \"react-icons/fa\";\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nimport { DateContext } from '../../App'\r\n// import Clock from 'react-live-clock';\r\n\r\nconst Task = ({ task, index, completeTask, deleteTask }) => {\r\n  const classes = styles();\r\n  const todaysDate = useContext(DateContext);\r\n  const time = new Date();\r\n\r\n  return (\r\n    <div className={classes.taskCard} elevation={5} onClick={() => completeTask(index)}>\r\n      <div>\r\n      <Typography className={classes.taskCardTitle} \r\n       style={{ textDecoration: task.completed ? 'line-through' : '' }}>{task.title}</Typography>\r\n        {\r\n          task.date === todaysDate ?  \r\n        <Typography className={classes.taskCardDate}>Today {task.time}</Typography>\r\n            :\r\n          <Typography className={classes.taskCardDate}>{task.date} {task.time}</Typography>\r\n        }\r\n        </div>\r\n      <IconButton\r\n        aria-label=\"deleteTodo\"\r\n        className={classes.deleteBtn}\r\n        onClick={(e) => { e.stopPropagation();\r\n          deleteTask(index)}}\r\n      >\r\n        <BsTrash />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Dashboard = () => {\r\n  const classes = styles();\r\n  const theme = useTheme();\r\n  const cDate = new Date();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const history = useHistory();\r\n  const user = JSON.parse(sessionStorage.getItem('UserData'));\r\n  const todaysDate = useContext(DateContext);\r\n  const [newTodo, setNewTodo] = useState('');\r\n  // Todo container starts\r\n  const [taskContent, setTaskContent] = useState([\r\n    {\r\n      title: 'Chanting 16 rounds',\r\n      completed: true,\r\n      date: '15/10/2020',\r\n      time: '5:06 PM'\r\n    },\r\n    {\r\n      title: 'Meeting with John',\r\n      completed: false,\r\n      date: '15/10/2020',\r\n      time: '9:06 PM'\r\n    },\r\n    {\r\n      title: 'Deploying App',\r\n      completed: true,\r\n      date: '16/10/2020',\r\n      time: '2:30 PM'\r\n    },\r\n    {\r\n      title: 'Clg Assignment',\r\n      completed: false,\r\n      date: '17/10/2020',\r\n      time: '3:53 PM'\r\n    },\r\n  ]);\r\n  // Todo container closes\r\n\r\n\r\n  /** \r\n * code to get current time updating every second\r\n   */\r\n  const [date, setDate] = useState(cDate);\r\n  // setInterval for clock \r\n  useEffect(() => {\r\n    var timerID = setInterval(() => tick(), 1000);\r\n    return function cleanup() {\r\n      clearInterval(timerID);\r\n    };\r\n  });\r\n  // Ticking function for clock\r\n  function tick() {\r\n    setDate(new Date());\r\n  }\r\n\r\n\r\n  // Drawer handler:  open for mobile screen \r\n  const handleDrawerToggle = () => {\r\n    setIsOpen(!isOpen);\r\n  }\r\n\r\n  // Logout handler: clear the session storage\r\n  const logoutHandler = () => {\r\n    if (window.confirm('Do you really want to logout')) {\r\n      sessionStorage.clear();\r\n      history.push('/');\r\n    }\r\n  }\r\n\r\n // Anauthorized user can't directly access the Dasboard without login\r\n if (!user) return <Redirect to='/' />\r\n\r\n  // Avatar image handler: username decides the avatar image\r\n  let url;\r\n  if (user.name === 'Ashay') {\r\n    url = ashay;\r\n  }\r\n  else if (user.name === 'Harshal') {\r\n    url = harshal;\r\n  }\r\n  else if (user.name === 'Vivek') {\r\n    url = vivek;\r\n  }\r\n  else {\r\n    url = yash;\r\n  }\r\n\r\n  \r\n\r\n  // Drawer container starts\r\n  const DrawerContent = () => {\r\n    return (\r\n      <div>\r\n        <div className={classes.settings}>\r\n          <Typography className={classes.title}>DevBand</Typography>\r\n          <IconButton\r\n            aria-label=\"deleteTodo\"\r\n            className={classes.logoutBtn}\r\n            onClick={(e) => logoutHandler()}\r\n          >\r\n            <BsBoxArrowInRight />\r\n          </IconButton>\r\n        </div>\r\n\r\n        <Typography className={classes.greetToUser}>Welcome {user.name}!</Typography>\r\n        \r\n        {/* Profile section also shows the latest task */}\r\n        <div className={classes.profileTab}>\r\n          <Avatar alt={user.name} src={url} className={classes.avatar} />\r\n\r\n          <Typography className={classes.profileText}>\r\n            Meeting with John <br />\r\n            Family Friend\r\n                </Typography>\r\n\r\n          <BsHouseFill className={classes.profileIcon} />\r\n        </div>\r\n\r\n        <Paper className={classes.timeAndDate} elevation={10}>\r\n          <Grid container>\r\n            <Grid item xs={5} sm={5} md={5} xl={5} lg={5} className={classes.time}>\r\n              <BsClockFill className={classes.clockIcon} />\r\n              <Typography className={classes.timeString}>{date.toLocaleTimeString()}</Typography>\r\n              <Typography className={classes.timeString}>{todaysDate}</Typography>\r\n            </Grid>\r\n            <Grid item xs={7} sm={7} md={7} xl={7} lg={7} className={classes.date}>\r\n              <Typography className={classes.taskTitle}>Task Update</Typography>\r\n              <Typography className={classes.taskText}>5 Task Remains, 3 Task Completed</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n\r\n        <Calendar value={cDate} className={classes.calendar} />\r\n\r\n      </div>\r\n    )\r\n  }\r\n  // Drawer container closes\r\n\r\n\r\n  // function to add todo in taskContent\r\n   const addTask = title => {\r\n    const newTasks = [...taskContent, {\r\n      title, \r\n      completed: false, \r\n      time: cDate.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }),\r\n      date: todaysDate\r\n    }];\r\n    setTaskContent(newTasks);\r\n  };\r\n\r\n  // function to complete the task in todo\r\n  const completeTask = index => {\r\n    const newTasks = [...taskContent];\r\n    newTasks[index].completed = !newTasks[index].completed;\r\n    setTaskContent(newTasks);\r\n  }\r\n\r\n  // function to delete the task in todo\r\n  const deleteTask = index => {\r\n    if (window.confirm('Do you completed that task and want to delete it ?')) {\r\n      const newTasks = [...taskContent];\r\n      console.log(index);\r\n      newTasks.splice(index, 1);\r\n      setTaskContent(newTasks);\r\n    }\r\n  }\r\n\r\n   //Todo submit handler: handle the todo submission\r\n   const todoSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (!newTodo) return;\r\n\r\n    addTask(newTodo);\r\n    setNewTodo('');\r\n    alert('Task successfully added');\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      {/* Drawer starts */}\r\n      <nav className={classes.drawer}>\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={isOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            <IconButton onClick={handleDrawerToggle} className={classes.closeMenuButton}>\r\n              <FaTimes />\r\n            </IconButton>\r\n            <DrawerContent />\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n          >\r\n            <div className={classes.toolbar} />\r\n            <DrawerContent />\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      {/* Drawer Closes */}\r\n\r\n      {/* Main content starts */}\r\n      <div className={classes.content}>\r\n      <IconButton\r\n        color=\"inherit\"\r\n        aria-label=\"Open drawer\"\r\n        edge=\"start\"\r\n        onClick={handleDrawerToggle}\r\n        className={classes.menuButton}\r\n      >\r\n        <FaStream />\r\n      </IconButton>\r\n        <form onSubmit={todoSubmitHandler}>\r\n          <FormControl fullWidth className={classes.todoForm}>\r\n            <InputLabel htmlFor=\"inputTodo\" className={classes.input}>Add Task</InputLabel>\r\n            <Input\r\n              id=\"inputTodo\"\r\n              type='text'\r\n              className={classes.input}\r\n              value={newTodo}\r\n              onChange={(e) => setNewTodo(e.target.value)}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    aria-label=\"submitTodo\"\r\n                    className={classes.iconBtn}\r\n                    type='submit'\r\n                  >\r\n                    <FaTelegramPlane />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            />\r\n          </FormControl>\r\n        </form>\r\n\r\n        <div className={classes.tasks}>\r\n        <Grid container>\r\n          <Grid item md={4} xl={6} lg={6}></Grid>\r\n          <Grid item xl={12} sm={12} md={8} xl={6} lg={6}>\r\n          {\r\n            taskContent.map((task, index) => (\r\n                // <Grid item xs={12} sm={12} md={6} xl={6} lg={6} className={classes.todoCard} key={index}>\r\n                  <Task  key={index}\r\n                    task={task}\r\n                    index={index}\r\n                    completeTask={completeTask}\r\n                    deleteTask={deleteTask} />\r\n                // </Grid> \r\n            ))\r\n          }\r\n          </Grid>\r\n          {/* <Grid item md={2} xl={3} lg={3}></Grid> */}\r\n          </Grid>\r\n\r\n        </div>\r\n\r\n      </div>\r\n      {/* Main content closes */}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Dashboard\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}